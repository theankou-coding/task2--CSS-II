Sass (Syntactically Awesome Style Sheets) is a preprocessor that extends CSS with features like variables, functions, and inheritance, allowing for more efficient and maintainable stylesheets. Hereâ€™s how to use variables and functions in Sass, along with an explanation of inheritance.

Using Variables in Sass
Variables in Sass allow you to store values that you can reuse throughout your stylesheets. This helps maintain consistency and makes it easier to update styles.

Example of Declaring and Using a Variable:

scss
Copy code
// Declare a variable
$primary-color: #3498db;
$padding: 16px;

// Use the variable in styles
.button {
  background-color: $primary-color;
  padding: $padding;
  color: white;
  border: none;
  border-radius: 4px;
  
  &:hover {
    background-color: darken($primary-color, 10%);
  }
}
In this example:

We declare two variables: $primary-color for the button's background color and $padding for the padding.
We then use these variables within the .button class.
The darken() function modifies the primary color for the hover state.
Using Functions in Sass
Sass provides built-in functions and allows you to create your own functions to perform calculations or manipulations.

Example of Declaring and Using a Function:

scss
Copy code
// Define a function to calculate margin
@function calculate-margin($base-value) {
  @return $base-value * 1.5;
}

// Use the function in styles
.container {
  margin: calculate-margin(20px);
}
In this example:

We define a function calculate-margin that takes a base value and multiplies it by 1.5.
We then use this function in the .container class to set its margin.
Inheritance in Sass
Inheritance in Sass allows one selector to inherit styles from another, making it easier to maintain consistent styling across similar elements.

Example of Inheritance:

scss
Copy code
// Base class
%card {
  background-color: white;
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 16px;
}

// Extended class using inheritance
.alert {
  @extend %card;
  border-color: red;
}

.card {
  @extend %card;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
In this example:

We define a placeholder selector %card that contains common styles for card-like components.
The .alert class extends %card but adds a custom border color.
The .card class also extends %card and adds a box shadow.
Summary
Variables in Sass allow for storing reusable values, helping to maintain consistent styles across the stylesheet.
Functions let you create reusable calculations or transformations, enhancing code maintainability.
Inheritance using placeholders allows for reusing styles efficiently without duplicating code.
Using these features effectively can greatly improve the structure and maintainability of your stylesheets.